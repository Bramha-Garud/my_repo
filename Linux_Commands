josh@josh-Latitude-3440:~/Git_Practice/Git_Practice_7$ git init
hint: Using 'master' as the name for the initial branch. This default branch name
hint: is subject to change. To configure the initial branch name to use in all
hint: of your new repositories, which will suppress this warning, call:
hint: 
hint: 	git config --global init.defaultBranch <name>
hint: 
hint: Names commonly chosen instead of 'master' are 'main', 'trunk' and
hint: 'development'. The just-created branch can be renamed via this command:
hint: 
hint: 	git branch -m <name>
Initialized empty Git repository in /home/josh/Git_Practice/Git_Practice_7/.git/
josh@josh-Latitude-3440:~/Git_Practice/Git_Practice_7$ git checkout -b feature-1
Switched to a new branch 'feature-1'
josh@josh-Latitude-3440:~/Git_Practice/Git_Practice_7$ echo "Feature 1 - File 1" > file1.txt
josh@josh-Latitude-3440:~/Git_Practice/Git_Practice_7$ echo "Feature 1 - File 2" > file2.txt
josh@josh-Latitude-3440:~/Git_Practice/Git_Practice_7$ git add .
josh@josh-Latitude-3440:~/Git_Practice/Git_Practice_7$ git commit -m "Added files for feature-1"
[feature-1 (root-commit) af3605e] Added files for feature-1
 2 files changed, 2 insertions(+)
 create mode 100644 file1.txt
 create mode 100644 file2.txt
josh@josh-Latitude-3440:~/Git_Practice/Git_Practice_7$ git checkout -b feature-2
Switched to a new branch 'feature-2'
josh@josh-Latitude-3440:~/Git_Practice/Git_Practice_7$ echo "Feature 2 - File 1" > file3.txt
josh@josh-Latitude-3440:~/Git_Practice/Git_Practice_7$ echo "Feature 2 - File 4" > file4.txt
josh@josh-Latitude-3440:~/Git_Practice/Git_Practice_7$ git add .
josh@josh-Latitude-3440:~/Git_Practice/Git_Practice_7$ git commit -m "Added files for feature-2"
[feature-2 13690cc] Added files for feature-2
 2 files changed, 2 insertions(+)
 create mode 100644 file3.txt
 create mode 100644 file4.txt
josh@josh-Latitude-3440:~/Git_Practice/Git_Practice_7$ git checkout -b main
Switched to a new branch 'main'
josh@josh-Latitude-3440:~/Git_Practice/Git_Practice_7$ git checkout feature-1
Switched to branch 'feature-1'
josh@josh-Latitude-3440:~/Git_Practice/Git_Practice_7$ echo "Temporary changes" > temp.txt
josh@josh-Latitude-3440:~/Git_Practice/Git_Practice_7$ git status
On branch feature-1
Untracked files:
  (use "git add <file>..." to include in what will be committed)
	temp.txt

nothing added to commit but untracked files present (use "git add" to track)
josh@josh-Latitude-3440:~/Git_Practice/Git_Practice_7$ git stash
No local changes to save
josh@josh-Latitude-3440:~/Git_Practice/Git_Practice_7$ git status
On branch feature-1
Untracked files:
  (use "git add <file>..." to include in what will be committed)
	temp.txt

nothing added to commit but untracked files present (use "git add" to track)
josh@josh-Latitude-3440:~/Git_Practice/Git_Practice_7$ echo "Temp changes" > temp.txt
josh@josh-Latitude-3440:~/Git_Practice/Git_Practice_7$ git status
On branch feature-1
Untracked files:
  (use "git add <file>..." to include in what will be committed)
	temp.txt

nothing added to commit but untracked files present (use "git add" to track)
josh@josh-Latitude-3440:~/Git_Practice/Git_Practice_7$ git stash
No local changes to save
josh@josh-Latitude-3440:~/Git_Practice/Git_Practice_7$ git checkout main
Switched to branch 'main'
josh@josh-Latitude-3440:~/Git_Practice/Git_Practice_7$ git stash pop
No stash entries found.
josh@josh-Latitude-3440:~/Git_Practice/Git_Practice_7$ ^C
josh@josh-Latitude-3440:~/Git_Practice/Git_Practice_7$ echo "Temp1 changes" > temp2.txt
josh@josh-Latitude-3440:~/Git_Practice/Git_Practice_7$ git add .
josh@josh-Latitude-3440:~/Git_Practice/Git_Practice_7$ git stash
Saved working directory and index state WIP on main: 13690cc Added files for feature-2
josh@josh-Latitude-3440:~/Git_Practice/Git_Practice_7$ git chechout main
git: 'chechout' is not a git command. See 'git --help'.

The most similar command is
	checkout
josh@josh-Latitude-3440:~/Git_Practice/Git_Practice_7$ git checkout main
Already on 'main'
josh@josh-Latitude-3440:~/Git_Practice/Git_Practice_7$ git checkout feature-2
Switched to branch 'feature-2'
josh@josh-Latitude-3440:~/Git_Practice/Git_Practice_7$ git stash pop
On branch feature-2
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
	new file:   temp.txt
	new file:   temp2.txt

Dropped refs/stash@{0} (f890b57d6cd54a9210cb8108d606b84027989249)
josh@josh-Latitude-3440:~/Git_Practice/Git_Practice_7$ git chechout main
git: 'chechout' is not a git command. See 'git --help'.

The most similar command is
	checkout
josh@josh-Latitude-3440:~/Git_Practice/Git_Practice_7$ git checkout main
A	temp.txt
A	temp2.txt
Switched to branch 'main'
josh@josh-Latitude-3440:~/Git_Practice/Git_Practice_7$ echo "This is a new feature > feature.txt
> 
> ^C
josh@josh-Latitude-3440:~/Git_Practice/Git_Practice_7$ echo "This is a new feature" > feature.txt
josh@josh-Latitude-3440:~/Git_Practice/Git_Practice_7$ git add feature.txt
josh@josh-Latitude-3440:~/Git_Practice/Git_Practice_7$ git commit -m "Added feature file"
[main 71ab9e3] Added feature file
 3 files changed, 3 insertions(+)
 create mode 100644 feature.txt
 create mode 100644 temp.txt
 create mode 100644 temp2.txt
josh@josh-Latitude-3440:~/Git_Practice/Git_Practice_7$ git reset --soft HEAD-1
fatal: ambiguous argument 'HEAD-1': unknown revision or path not in the working tree.
Use '--' to separate paths from revisions, like this:
'git <command> [<revision>...] -- [<file>...]'
josh@josh-Latitude-3440:~/Git_Practice/Git_Practice_7$ git reset --soft HEAD~1
josh@josh-Latitude-3440:~/Git_Practice/Git_Practice_7$ git commit -m "Modified commit message"
[main ff08a1a] Modified commit message
 3 files changed, 3 insertions(+)
 create mode 100644 feature.txt
 create mode 100644 temp.txt
 create mode 100644 temp2.txt
josh@josh-Latitude-3440:~/Git_Practice/Git_Practice_7$ echo "Another feature" > another.txt
josh@josh-Latitude-3440:~/Git_Practice/Git_Practice_7$ git add another.txt
josh@josh-Latitude-3440:~/Git_Practice/Git_Practice_7$ git commit -m "Added another feature"
[main 4c826f3] Added another feature
 1 file changed, 1 insertion(+)
 create mode 100644 another.txt
josh@josh-Latitude-3440:~/Git_Practice/Git_Practice_7$ git reset --hard HEAD~1
HEAD is now at ff08a1a Modified commit message
josh@josh-Latitude-3440:~/Git_Practice/Git_Practice_7$ git status
On branch main
nothing to commit, working tree clean
josh@josh-Latitude-3440:~/Git_Practice/Git_Practice_7$ 
